import asyncio
import aiohttp
import os
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, FSInputFile
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.enums import ParseMode, ContentType
from aiogram.filters import Command
from aiogram.client.default import DefaultBotProperties
from dotenv import load_dotenv
from deep_translator import GoogleTranslator
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from gtts import gTTS
import uuid


load_dotenv()

TOKEN = os.getenv("TG_BOT_TOKEN")
WEATHER_API_KEY = os.getenv("API_WEATHER")

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))

dp = Dispatcher()

# üìå –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —ç–º–æ–¥–∑–∏
def get_main_keyboard():
    builder = ReplyKeyboardBuilder()
    builder.button(text="üëã –°—Ç–∞—Ä—Ç")
    builder.button(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å")
    builder.button(text="üå¶ –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã")
    builder.button(text="üé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
    builder.button(text="üí¨ –ü–µ—Ä–µ–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç")
    builder.adjust(2)  # 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
    return builder.as_markup(resize_keyboard=True)

# üü¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ "–°—Ç–∞—Ä—Ç"
@dp.message(F.text == "üëã –°—Ç–∞—Ä—Ç")
async def start_handler(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–≥–æ–¥–Ω—ã–π –±–æ—Ç. –Ø –º–æ–≥—É —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ –∏–ª–∏ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç. –Ø —Ç–∞–∫–∂–µ –º–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–±–µ –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –≤ –ú–æ—Å–∫–≤–µ ‚òÅÔ∏è\n\n"
        "–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—É—é –æ–ø—Ü–∏—é –Ω–∏–∂–µ üëá",
        reply_markup=get_main_keyboard()
    )

# üü° –û–±—Ä–∞–±–æ—Ç–∫–∞ "–ü–æ–º–æ—â—å"
@dp.message(F.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
async def help_handler(message: Message):
    await message.answer(
        "–Ø –º–æ–≥—É:\n"
        "üå¶ –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É –≤ –ú–æ—Å–∫–≤–µ\n"
        "üëã –ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è\n"
        "‚ÑπÔ∏è –†–∞—Å—Å–∫–∞–∑–∞—Ç—å, —á—Ç–æ —è —É–º–µ—é\n"
        "üî§ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–≤–æ–π —Ç–µ–∫—Å—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π\n"
        "üé§ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Ç–≤–æ–π —Ç–µ–∫—Å—Ç –≤ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏–ª–∏ –Ω–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ!"
    )

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class VoiceStates(StatesGroup):
    waiting_for_text = State()

class TranslateStates(StatesGroup):
    waiting_for_text = State()

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "üé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ" ---
@dp.message(F.text == "üé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
async def request_voice_text(message: Message, state: FSMContext):
    await message.answer("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –æ–∑–≤—É—á–∏—Ç—å:")
    await state.set_state(VoiceStates.waiting_for_text)

@dp.message(VoiceStates.waiting_for_text)
async def generate_and_send_voice(message: Message, state: FSMContext):
    text = message.text
    try:
        tts = gTTS(text, lang='ru')
        filename = f"{uuid.uuid4()}.ogg"
        tts.save(filename)

        voice = FSInputFile(filename)
        await message.answer_voice(voice, caption="üéß –í–æ—Ç –≤–∞—à–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")

        os.remove(filename)
    except Exception as e:
        await message.reply(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    finally:
        await state.clear()

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "üí¨ –ü–µ—Ä–µ–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç" ---
@dp.message(F.text == "üí¨ –ü–µ—Ä–µ–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç")
async def request_translation_text(message: Message, state: FSMContext):
    await message.answer("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π:")
    await state.set_state(TranslateStates.waiting_for_text)

@dp.message(TranslateStates.waiting_for_text)
async def handle_translation(message: Message, state: FSMContext):
    try:
        translated = GoogleTranslator(source='ru', target='en').translate(message.text)
        await message.reply(f"üî§ –ü–µ—Ä–µ–≤–æ–¥:\n{translated}")
    except Exception as e:
        await message.reply(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ: {e}")
    finally:
        await state.clear()

# üîµ –û–±—Ä–∞–±–æ—Ç–∫–∞ "–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã"
@dp.message(F.text == "üå¶ –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã")
async def forecast_handler(message: Message):
    url = f"http://api.weatherapi.com/v1/current.json?key={WEATHER_API_KEY}&q=Moscow&lang=ru"

    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            if response.status == 200:
                data = await response.json()
                weather = data["current"]
                text = (
                    f"üåç –ì–æ—Ä–æ–¥: –ú–æ—Å–∫–≤–∞\n"
                    f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {weather['temp_c']}¬∞C\n"
                    f"‚òÅÔ∏è –°–æ—Å—Ç–æ—è–Ω–∏–µ: {weather['condition']['text']}\n"
                    f"üí® –í–µ—Ç–µ—Ä: {weather['wind_kph']} –∫–º/—á\n"
                    f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {weather['humidity']}%"
                )
                await message.answer(text)
            else:
                await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# --- –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –≤ –ø–∞–ø–∫—É img ---
@dp.message(F.content_type == ContentType.PHOTO)
async def save_photo(message: Message):
    os.makedirs("img", exist_ok=True)
    photo = message.photo[-1]  # —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ
    file = await bot.get_file(photo.file_id)
    file_path = file.file_path
    destination = f"img/{photo.file_id}.jpg"
    await bot.download_file(file_path, destination)
    await message.reply("‚úÖ –§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!")

# üîπ –ù–∞ —Å–ª—É—á–∞–π –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –≤—Ä—É—á–Ω—É—é
@dp.message(Command("start"))
async def cmd_start(message: Message):
    await start_handler(message)

@dp.message(Command("help"))
async def cmd_help(message: Message):
    await help_handler(message)

# üöÄ –ó–∞–ø—É—Å–∫
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
